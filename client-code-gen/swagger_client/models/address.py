# coding: utf-8

"""
    Flower Shop -- Billing

    This is a sample Flower Shop server.   This includes the Billing REST APIs. You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).   # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: rosemary.charnley@smartbear.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Address(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address_1': 'str',
        'address_2': 'str',
        'zipcode': 'int',
        'country': 'str'
    }

    attribute_map = {
        'address_1': 'address_1',
        'address_2': 'address_2',
        'zipcode': 'zipcode',
        'country': 'country'
    }

    def __init__(self, address_1=None, address_2=None, zipcode=None, country=None):  # noqa: E501
        """Address - a model defined in Swagger"""  # noqa: E501
        self._address_1 = None
        self._address_2 = None
        self._zipcode = None
        self._country = None
        self.discriminator = None
        if address_1 is not None:
            self.address_1 = address_1
        if address_2 is not None:
            self.address_2 = address_2
        if zipcode is not None:
            self.zipcode = zipcode
        if country is not None:
            self.country = country

    @property
    def address_1(self):
        """Gets the address_1 of this Address.  # noqa: E501


        :return: The address_1 of this Address.  # noqa: E501
        :rtype: str
        """
        return self._address_1

    @address_1.setter
    def address_1(self, address_1):
        """Sets the address_1 of this Address.


        :param address_1: The address_1 of this Address.  # noqa: E501
        :type: str
        """

        self._address_1 = address_1

    @property
    def address_2(self):
        """Gets the address_2 of this Address.  # noqa: E501


        :return: The address_2 of this Address.  # noqa: E501
        :rtype: str
        """
        return self._address_2

    @address_2.setter
    def address_2(self, address_2):
        """Sets the address_2 of this Address.


        :param address_2: The address_2 of this Address.  # noqa: E501
        :type: str
        """

        self._address_2 = address_2

    @property
    def zipcode(self):
        """Gets the zipcode of this Address.  # noqa: E501


        :return: The zipcode of this Address.  # noqa: E501
        :rtype: int
        """
        return self._zipcode

    @zipcode.setter
    def zipcode(self, zipcode):
        """Sets the zipcode of this Address.


        :param zipcode: The zipcode of this Address.  # noqa: E501
        :type: int
        """

        self._zipcode = zipcode

    @property
    def country(self):
        """Gets the country of this Address.  # noqa: E501


        :return: The country of this Address.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Address.


        :param country: The country of this Address.  # noqa: E501
        :type: str
        """

        self._country = country

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Address, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Address):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
