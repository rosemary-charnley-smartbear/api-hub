# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.address import Address  # noqa: F401,E501
from swagger_server.models.person import Person  # noqa: F401,E501
from swagger_server import util


class Bill(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, person: Person=None, billing_address: Address=None, discount_code: str=None, payment_type: str=None, discount: float=None, subtotal: float=None, tax: float=None, total: float=None):  # noqa: E501
        """Bill - a model defined in Swagger

        :param id: The id of this Bill.  # noqa: E501
        :type id: str
        :param person: The person of this Bill.  # noqa: E501
        :type person: Person
        :param billing_address: The billing_address of this Bill.  # noqa: E501
        :type billing_address: Address
        :param discount_code: The discount_code of this Bill.  # noqa: E501
        :type discount_code: str
        :param payment_type: The payment_type of this Bill.  # noqa: E501
        :type payment_type: str
        :param discount: The discount of this Bill.  # noqa: E501
        :type discount: float
        :param subtotal: The subtotal of this Bill.  # noqa: E501
        :type subtotal: float
        :param tax: The tax of this Bill.  # noqa: E501
        :type tax: float
        :param total: The total of this Bill.  # noqa: E501
        :type total: float
        """
        self.swagger_types = {
            'id': str,
            'person': Person,
            'billing_address': Address,
            'discount_code': str,
            'payment_type': str,
            'discount': float,
            'subtotal': float,
            'tax': float,
            'total': float
        }

        self.attribute_map = {
            'id': 'id',
            'person': 'person',
            'billing_address': 'billingAddress',
            'discount_code': 'discountCode',
            'payment_type': 'paymentType',
            'discount': 'discount',
            'subtotal': 'subtotal',
            'tax': 'tax',
            'total': 'total'
        }
        self._id = id
        self._person = person
        self._billing_address = billing_address
        self._discount_code = discount_code
        self._payment_type = payment_type
        self._discount = discount
        self._subtotal = subtotal
        self._tax = tax
        self._total = total

    @classmethod
    def from_dict(cls, dikt) -> 'Bill':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Bill of this Bill.  # noqa: E501
        :rtype: Bill
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Bill.


        :return: The id of this Bill.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Bill.


        :param id: The id of this Bill.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def person(self) -> Person:
        """Gets the person of this Bill.


        :return: The person of this Bill.
        :rtype: Person
        """
        return self._person

    @person.setter
    def person(self, person: Person):
        """Sets the person of this Bill.


        :param person: The person of this Bill.
        :type person: Person
        """

        self._person = person

    @property
    def billing_address(self) -> Address:
        """Gets the billing_address of this Bill.


        :return: The billing_address of this Bill.
        :rtype: Address
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address: Address):
        """Sets the billing_address of this Bill.


        :param billing_address: The billing_address of this Bill.
        :type billing_address: Address
        """

        self._billing_address = billing_address

    @property
    def discount_code(self) -> str:
        """Gets the discount_code of this Bill.


        :return: The discount_code of this Bill.
        :rtype: str
        """
        return self._discount_code

    @discount_code.setter
    def discount_code(self, discount_code: str):
        """Sets the discount_code of this Bill.


        :param discount_code: The discount_code of this Bill.
        :type discount_code: str
        """

        self._discount_code = discount_code

    @property
    def payment_type(self) -> str:
        """Gets the payment_type of this Bill.


        :return: The payment_type of this Bill.
        :rtype: str
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type: str):
        """Sets the payment_type of this Bill.


        :param payment_type: The payment_type of this Bill.
        :type payment_type: str
        """

        self._payment_type = payment_type

    @property
    def discount(self) -> float:
        """Gets the discount of this Bill.


        :return: The discount of this Bill.
        :rtype: float
        """
        return self._discount

    @discount.setter
    def discount(self, discount: float):
        """Sets the discount of this Bill.


        :param discount: The discount of this Bill.
        :type discount: float
        """

        self._discount = discount

    @property
    def subtotal(self) -> float:
        """Gets the subtotal of this Bill.


        :return: The subtotal of this Bill.
        :rtype: float
        """
        return self._subtotal

    @subtotal.setter
    def subtotal(self, subtotal: float):
        """Sets the subtotal of this Bill.


        :param subtotal: The subtotal of this Bill.
        :type subtotal: float
        """

        self._subtotal = subtotal

    @property
    def tax(self) -> float:
        """Gets the tax of this Bill.


        :return: The tax of this Bill.
        :rtype: float
        """
        return self._tax

    @tax.setter
    def tax(self, tax: float):
        """Sets the tax of this Bill.


        :param tax: The tax of this Bill.
        :type tax: float
        """

        self._tax = tax

    @property
    def total(self) -> float:
        """Gets the total of this Bill.


        :return: The total of this Bill.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total: float):
        """Sets the total of this Bill.


        :param total: The total of this Bill.
        :type total: float
        """

        self._total = total
