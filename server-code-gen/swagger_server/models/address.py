# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Address(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, address_1: str=None, address_2: str=None, zipcode: int=None, country: str=None):  # noqa: E501
        """Address - a model defined in Swagger

        :param address_1: The address_1 of this Address.  # noqa: E501
        :type address_1: str
        :param address_2: The address_2 of this Address.  # noqa: E501
        :type address_2: str
        :param zipcode: The zipcode of this Address.  # noqa: E501
        :type zipcode: int
        :param country: The country of this Address.  # noqa: E501
        :type country: str
        """
        self.swagger_types = {
            'address_1': str,
            'address_2': str,
            'zipcode': int,
            'country': str
        }

        self.attribute_map = {
            'address_1': 'address_1',
            'address_2': 'address_2',
            'zipcode': 'zipcode',
            'country': 'country'
        }
        self._address_1 = address_1
        self._address_2 = address_2
        self._zipcode = zipcode
        self._country = country

    @classmethod
    def from_dict(cls, dikt) -> 'Address':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Address of this Address.  # noqa: E501
        :rtype: Address
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_1(self) -> str:
        """Gets the address_1 of this Address.


        :return: The address_1 of this Address.
        :rtype: str
        """
        return self._address_1

    @address_1.setter
    def address_1(self, address_1: str):
        """Sets the address_1 of this Address.


        :param address_1: The address_1 of this Address.
        :type address_1: str
        """

        self._address_1 = address_1

    @property
    def address_2(self) -> str:
        """Gets the address_2 of this Address.


        :return: The address_2 of this Address.
        :rtype: str
        """
        return self._address_2

    @address_2.setter
    def address_2(self, address_2: str):
        """Sets the address_2 of this Address.


        :param address_2: The address_2 of this Address.
        :type address_2: str
        """

        self._address_2 = address_2

    @property
    def zipcode(self) -> int:
        """Gets the zipcode of this Address.


        :return: The zipcode of this Address.
        :rtype: int
        """
        return self._zipcode

    @zipcode.setter
    def zipcode(self, zipcode: int):
        """Sets the zipcode of this Address.


        :param zipcode: The zipcode of this Address.
        :type zipcode: int
        """

        self._zipcode = zipcode

    @property
    def country(self) -> str:
        """Gets the country of this Address.


        :return: The country of this Address.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country: str):
        """Sets the country of this Address.


        :param country: The country of this Address.
        :type country: str
        """

        self._country = country
