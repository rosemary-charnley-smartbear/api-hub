# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Person(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, firstname: str=None, lastname: str=None, email: str=None, phonenumber: str=None, address: str=None):  # noqa: E501
        """Person - a model defined in Swagger

        :param id: The id of this Person.  # noqa: E501
        :type id: str
        :param firstname: The firstname of this Person.  # noqa: E501
        :type firstname: str
        :param lastname: The lastname of this Person.  # noqa: E501
        :type lastname: str
        :param email: The email of this Person.  # noqa: E501
        :type email: str
        :param phonenumber: The phonenumber of this Person.  # noqa: E501
        :type phonenumber: str
        :param address: The address of this Person.  # noqa: E501
        :type address: str
        """
        self.swagger_types = {
            'id': str,
            'firstname': str,
            'lastname': str,
            'email': str,
            'phonenumber': str,
            'address': str
        }

        self.attribute_map = {
            'id': 'id',
            'firstname': 'firstname',
            'lastname': 'lastname',
            'email': 'email',
            'phonenumber': 'phonenumber',
            'address': 'address'
        }
        self._id = id
        self._firstname = firstname
        self._lastname = lastname
        self._email = email
        self._phonenumber = phonenumber
        self._address = address

    @classmethod
    def from_dict(cls, dikt) -> 'Person':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Person of this Person.  # noqa: E501
        :rtype: Person
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Person.


        :return: The id of this Person.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Person.


        :param id: The id of this Person.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def firstname(self) -> str:
        """Gets the firstname of this Person.


        :return: The firstname of this Person.
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname: str):
        """Sets the firstname of this Person.


        :param firstname: The firstname of this Person.
        :type firstname: str
        """
        if firstname is None:
            raise ValueError("Invalid value for `firstname`, must not be `None`")  # noqa: E501

        self._firstname = firstname

    @property
    def lastname(self) -> str:
        """Gets the lastname of this Person.


        :return: The lastname of this Person.
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname: str):
        """Sets the lastname of this Person.


        :param lastname: The lastname of this Person.
        :type lastname: str
        """

        self._lastname = lastname

    @property
    def email(self) -> str:
        """Gets the email of this Person.


        :return: The email of this Person.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this Person.


        :param email: The email of this Person.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def phonenumber(self) -> str:
        """Gets the phonenumber of this Person.


        :return: The phonenumber of this Person.
        :rtype: str
        """
        return self._phonenumber

    @phonenumber.setter
    def phonenumber(self, phonenumber: str):
        """Sets the phonenumber of this Person.


        :param phonenumber: The phonenumber of this Person.
        :type phonenumber: str
        """

        self._phonenumber = phonenumber

    @property
    def address(self) -> str:
        """Gets the address of this Person.


        :return: The address of this Person.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address: str):
        """Sets the address of this Person.


        :param address: The address of this Person.
        :type address: str
        """

        self._address = address
